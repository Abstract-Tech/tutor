# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'Ubuntu-16.04'

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
      architecture: 'x64'

  - script: pip install -r requirements/base.txt && pip install .
    displayName: 'Install tutor'

  - script: |
      tutor config save --silent \
        --set ACTIVATE_NOTES=false \
        --set ACTIVATE_XQUEUE=false \
        --set LMS_HOST=localhost
    displayName: 'Configure tutor'

  #- script: |
  #    sudo apt-get update -qq
  #    sudo apt-get install -qq -y software-properties-common
  #    sudo add-apt-repository -y ppa:projectatomic/ppa
  #    sudo apt-get update -qq
  #    sudo apt-get -qq -y install buildah
  #  displayName: 'Install buildah'

  - script: |
      docker pull silviot/openedx-alpine:ironwood
      docker tag silviot/openedx-alpine:ironwood regis/openedx:ironwood
    displayName: 'Pull ironwood docker image'

  - script: docker-compose -f $(tutor config printroot)/env/local/docker-compose.yml pull mysql
    displayName: 'Pull mysql docker image'

  - script: docker-compose -f $(tutor config printroot)/env/local/docker-compose.yml pull nginx
    displayName: 'Pull nginx docker image'

  - script: docker-compose -f $(tutor config printroot)/env/local/docker-compose.yml pull memcached
    displayName: 'Pull memcached docker image'

  - script: docker-compose -f $(tutor config printroot)/env/local/docker-compose.yml pull rabbitmq
    displayName: 'Pull rabbitmq docker image'

  - script: docker-compose -f $(tutor config printroot)/env/local/docker-compose.yml pull elasticsearch
    displayName: 'Pull elasticsearch docker image'

  - script: docker-compose -f $(tutor config printroot)/env/local/docker-compose.yml pull mongodb
    displayName: 'Pull MongoDB docker image'

  #- script: $(tutor config printroot)/env/build/openedx-alpine/build_base_alpine.sh
  #  displayName: 'Build base Alpine images'

  #- script: $(tutor config printroot)/env/build/openedx-alpine/build_wheels.sh
  #  displayName: 'Build image with wheels'

  #- script: $(tutor config printroot)/env/build/openedx-alpine/build_openedx_image.sh
  #  displayName: 'Build complete openedx image'

  #- script: sudo buildah push localhost/openedx-first docker-daemon:regis/openedx:ironwood
  #  displayName: 'Push buildah image to docker'

  - script: |
      tutor local databases
      docker-compose -f $(tutor config printroot)/env/local/docker-compose.yml --project-name tutor_local start mysql
      tutor local databases
    displayName: 'Initialize databases'

  - script: tutor local start -d
    displayName: 'Start edX server'

  - script: |
      docker-compose -f $(tutor config printroot)/env/local/docker-compose.yml \
      --project-name tutor_local \
      run --rm \
      -v $(pwd)/tests/fixtures/users.json:/openedx/edx-platform/users.json \
      lms \
        bash -e -c \
          './manage.py lms --settings=tutor.production loaddata users.json'
    displayName: 'Create initial users to be used in tests'

  - script: |
      docker build tests/e2e -t cypress:tutor
    displayName: 'Build cypress e2e tests docker image'

  - script: |
      docker run --rm \
        --name cypress \
        --network host \
        -e CYPRESS_baseUrl=http://localhost:80 \
        cypress:tutor \
        npx cypress run
    displayName: 'Run cypress e2e tests'

  - script: echo "We made it to the bottom of the file! Time to celebrate. Go have a pint! (just kidding, keep at it! There's much more work to do)"
    displayName: 'Pat ourselves on the back'
