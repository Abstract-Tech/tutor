# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  - group: Publish test results

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
      architecture: 'x64'

  - script: |
      nohup /usr/bin/time -o cypress_time.log -p \
        docker build tests/e2e -t cypress > cypress.log 2> cypress.err \
      & echo $! > cypress.pid
    displayName: Start building cypress image

  - script: |
      mkdir ~/.ssh
      echo -e ${TEST_RESULTS_KEY} > ~/.ssh/id_ecdsa
      echo -e ${TEST_RESULTS_KEY_PUBLIC} > ~/.ssh/id_ecdsa.pub
      echo -e ${TEST_RESULTS_KNOWN_HOSTS} > ~/.ssh/known_hosts
      chmod 0600 ~/.ssh/id_ecdsa ~/.ssh/known_hosts
    displayName: Install key to publish test results
    env:
      TEST_RESULTS_KEY: $(TEST_RESULTS_KEY)

  - script: |
      echo "##vso[task.setvariable variable=TUTOR_ROOT;]$(pwd)/tutor_root"
      echo "##vso[task.setvariable variable=DOCKER_COMPOSE;]docker-compose -f $(pwd)/tutor_root/env/local/docker-compose.yml --project-name tutor_local"
    displayName: Set TUTOR_ROOT variable to a location internal to the project

  - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
    inputs:
      keyfile: 'tutor/templates/build/openedx-alpine/azure-db-cache'
      targetfolder: 'tutor_root/data/mysql, tutor_root/data/mongodb, tutor_root/config.yml, pip_cache'
      vstsFeed: '8b1737d6-762a-438d-acf4-e55593dc7819'

  - script: |
      ls -ld pip_cache
      chown $(id -u):$(id -g) pip_cache -R
      pip install --cache-dir pip_cache -c requirements/base.txt .
    displayName: 'Install tutor'

  - script: |
      ls -lR $(TUTOR_ROOT)
      ls -l pip_cache
      true
    displayName: Inspect cached files
    condition: always()

  - script: |
      tutor config save -y --silent \
        --set ACTIVATE_NOTES=false \
        --set ACTIVATE_XQUEUE=false \
        --set ACTIVATE_FORUM=false \
        --set LMS_HOST=localhost
    displayName: 'Configure tutor'

  - script: |
      ls -l $(TUTOR_ROOT)/config.yml && cat $(TUTOR_ROOT)/config.yml
      true
    displayName: Cat tutor config file
    condition: always()

  - script: |
      docker pull silviot/openedx-alpine:ironwood
      docker tag silviot/openedx-alpine:ironwood regis/openedx:ironwood
    displayName: 'Pull ironwood docker image'

  - script: ${DOCKER_COMPOSE} pull mysql nginx memcached rabbitmq elasticsearch mongodb smtp
    displayName: 'Pull other docker images'

  - script: |
      tutor local databases
    displayName: 'Initialize databases'
    condition: ne(variables['CacheRestored'], 'true')

  - script: |
      ${DOCKER_COMPOSE} \
      run --rm \
      -v $(pwd)/tests/fixtures/users.json:/openedx/edx-platform/users.json \
      lms \
        bash -e -c \
          './manage.py lms --settings=tutor.production loaddata users.json'
      tutor local stop
      ls -ld $(TUTOR_ROOT)/data/mysql $(TUTOR_ROOT)/data/mongodb $(TUTOR_ROOT)/config.yml
      sudo chown $(id -u):$(id -g) $(TUTOR_ROOT)/data/mysql $(TUTOR_ROOT)/data/mongodb $(TUTOR_ROOT)/config.yml -R
    displayName: 'Create initial users to be used in tests'
    condition: ne(variables['CacheRestored'], 'true')

  - script: |
      ls -lR $(TUTOR_ROOT)
      ls -l pip_cache
      true
    displayName: Inspect cached files
    condition: always()

  - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
    inputs:
      keyfile: 'tutor/templates/build/openedx-alpine/azure-db-cache'
      targetfolder: 'tutor_root/data/mysql, tutor_root/data/mongodb, tutor_root/config.yml, pip_cache'
      vstsFeed: '8b1737d6-762a-438d-acf4-e55593dc7819'
    condition: ne(variables['CacheRestored'], 'true')

  - script: tutor local start -d
    displayName: 'Start edX server'

  - script: curl http://localhost; curl http://studio.localhost; true
    displayName: 'Try with curl'

  - script: |
      if pgrep -F cypress.pid; then
        TAIL_OPTS=" -f --pid=$(cat cypress.pid)"
      fi
      tail ${TAIL_OPTS} -n +1 cypress_time.log cypress.log cypress.err
    displayName: Show progress from cypress docker image pulling and wait if needed

  - script: |
      docker run --rm \
        --name cypress \
        --network host \
        -e CYPRESS_baseUrl=http://localhost:80 \
        -e CI=1 \
        -v $(pwd)/tests/e2e/cypress:/app/cypress \
        -v $(pwd)/tests/e2e/cypress.json:/app/cypress.json \
        -v $(pwd)/tests/e2e/package.json:/app/package.json \
        -v $(pwd)/tests/e2e/package-lock.json:/app/package-lock.json \
        cypress \
        sh -c 'cd /app; $(npm bin)/cypress run'
    displayName: 'Run cypress e2e tests'

  - script: tutor local logs
    displayName: Show tutor logs
    condition: always()

  - script: |
      mkdir logs
      sudo pip install -U pip setuptools
      sudo pip install ansi2html
      for service in $(${DOCKER_COMPOSE} ps --services); do
        ${DOCKER_COMPOSE} logs $service | ansi2html > logs/$service.log.html
        ${DOCKER_COMPOSE} logs $service | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" > logs/$service.log
      done
      ${DOCKER_COMPOSE} logs | ansi2html > logs/all.log.html
      ${DOCKER_COMPOSE} logs | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" > logs/all.log
    displayName: Save logs for archival
    condition: always()

  - script: |
      tutor/templates/build/openedx-alpine/publish_results.sh \
        tests/e2e/cypress/videos \
        tests/e2e/cypress/screenshots \
        logs
    displayName: 'Publish test artifacts'
    condition: always()
