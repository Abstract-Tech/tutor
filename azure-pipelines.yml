# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  - group: Publish test results

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
      architecture: 'x64'

  - script: |
      mkdir ~/.ssh
      echo -e ${TEST_RESULTS_KEY} > ~/.ssh/id_ecdsa
      echo -e ${TEST_RESULTS_KEY_PUBLIC} > ~/.ssh/id_ecdsa.pub
      echo -e ${TEST_RESULTS_KNOWN_HOSTS} > ~/.ssh/known_hosts
      chmod 0600 ~/.ssh/id_ecdsa ~/.ssh/known_hosts
    displayName: Install key to publish test results
    env:
      TEST_RESULTS_KEY: $(TEST_RESULTS_KEY)

  - script: echo "##vso[task.setvariable variable=TUTOR_ROOT;]$(pwd)/tutor_root"
    displayName: Set TUTOR_ROOT variable to a location internal to the project

  - script: pip install -r requirements/base.txt && pip install .
    displayName: 'Install tutor'

  - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
    inputs:
      keyfile: 'tutor/templates/build/openedx-alpine/azure-db-cache'
      targetfolder: '$(TUTOR_ROOT)/data/mysql, $(TUTOR_ROOT)/data/mongodb, $(TUTOR_ROOT)/config.yml'
      vstsFeed: '8b1737d6-762a-438d-acf4-e55593dc7819'

  - script: |
      tutor config save --silent \
        --set ACTIVATE_NOTES=false \
        --set ACTIVATE_XQUEUE=false \
        --set LMS_HOST=localhost
    displayName: 'Configure tutor'

  - script: |
      docker pull silviot/openedx-alpine:ironwood
      docker tag silviot/openedx-alpine:ironwood regis/openedx:ironwood
    displayName: 'Pull ironwood docker image'

  - script: docker-compose -f $(tutor config printroot)/env/local/docker-compose.yml pull mysql nginx memcached rabbitmq elasticsearch mongodb smtp forum
    displayName: 'Pull other docker images'

  #- script: $(tutor config printroot)/env/build/openedx-alpine/build_base_alpine.sh
  #  displayName: 'Build base Alpine images'

  #- script: $(tutor config printroot)/env/build/openedx-alpine/build_wheels.sh
  #  displayName: 'Build image with wheels'

  #- script: $(tutor config printroot)/env/build/openedx-alpine/build_openedx_image.sh
  #  displayName: 'Build complete openedx image'

  #- script: sudo buildah push localhost/openedx-first docker-daemon:regis/openedx:ironwood
  #  displayName: 'Push buildah image to docker'

  - script: |
      tutor local databases
    displayName: 'Initialize databases'
    condition: ne(variables['CacheRestored'], 'true')

  - script: |
      docker-compose -f $(tutor config printroot)/env/local/docker-compose.yml \
      --project-name tutor_local \
      run --rm \
      -v $(pwd)/tests/fixtures/users.json:/openedx/edx-platform/users.json \
      lms \
        bash -e -c \
          './manage.py lms --settings=tutor.production loaddata users.json'
      tutor local stop
      sudo chown $(id -u) '$(TUTOR_ROOT)/data/mysql' '$(TUTOR_ROOT)/data/mongodb' -R
    displayName: 'Create initial users to be used in tests'
    condition: ne(variables['CacheRestored'], 'true')

  - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
    inputs:
      keyfile: 'tutor/templates/build/openedx-alpine/azure-db-cache'
      targetfolder: '$(TUTOR_ROOT)/data/mysql, $(TUTOR_ROOT)/data/mongodb, $(TUTOR_ROOT)/config.yml'
      vstsFeed: '8b1737d6-762a-438d-acf4-e55593dc7819'
    condition: ne(variables['CacheRestored'], 'true')

  - script: tutor local start -d
    displayName: 'Start edX server'

  - script: docker pull cypress/browsers:node11.13.0-chrome73
    displayName: Pull cypress docker image

  - script: |
      docker run --rm \
        --name cypress \
        --network host \
        -e CYPRESS_baseUrl=http://localhost:80 \
        -e CI=1 \
        -v $(pwd)/tests/e2e/cypress:/app/cypress \
        -v $(pwd)/tests/e2e/cypress.json:/app/cypress.json \
        -v $(pwd)/tests/e2e/package.json:/app/package.json \
        -v $(pwd)/tests/e2e/package-lock.json:/app/package-lock.json \
        cypress/browsers:node11.13.0-chrome73 \
        sh -c 'cd /app; npm ci; $(npm bin)/cypress run'
    displayName: 'Run cypress e2e tests'

  - script: tutor local logs
    displayName: Show tutor logs
    condition: always()

  - script: |
      tutor/templates/build/openedx-alpine/publish_results.sh tests/e2e/cypress/videos
    displayName: 'Publish test artifacts'
    condition: always()
